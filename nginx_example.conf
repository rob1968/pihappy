# Example Nginx Configuration (save as /etc/nginx/sites-available/pihap on VPS)

server {
    listen 80; # Listen on port 80 for HTTP
    # listen [::]:80; # Listen on IPv6 if needed

    # Replace with your actual domain name(s)
    server_name yourdomain.com www.yourdomain.com;

    # Path to your project's REACT BUILD directory on the server
    root /var/www/pihap/frontend/build;

    # Default file to serve for directories
    index index.html index.htm;

    # Serve static files directly from the build's static folder
    location /static/ {
        alias /var/www/pihap/frontend/build/static/;
        expires 1y; # Cache static assets aggressively
        add_header Cache-Control "public";
    }

    # Handle API requests - Proxy to Flask/Gunicorn backend
    location /api/ {
        # Ensure trailing slash consistency if your Flask routes expect it
        # proxy_pass http://127.0.0.1:5000/api/; # Option 1: Keep /api/ prefix for backend
        proxy_pass http://127.0.0.1:5000/;        # Option 2: Remove /api/ prefix for backend (adjust Flask routes accordingly)

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    # Handle frontend routing (React Router)
    # Try serving the file directly, then directory, then fall back to index.html
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Optional: Add error pages
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html;
    # }

    # Optional: Add security headers (example)
    # add_header X-Frame-Options "SAMEORIGIN";
    # add_header X-Content-Type-Options "nosniff";
    # add_header X-XSS-Protection "1; mode=block";
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
}

# --- HTTPS Configuration (Recommended for Production) ---
# Obtain an SSL certificate (e.g., using Let's Encrypt / Certbot)
# and create a similar server block listening on port 443.

# server {
#     listen 443 ssl http2;
#     # listen [::]:443 ssl http2;
#     server_name yourdomain.com www.yourdomain.com;
#
#     root /var/www/pihap/frontend/build;
#     index index.html index.htm;
#
#     # SSL Certificate paths (replace with your actual paths)
#     ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf; # Recommended SSL settings
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # Diffie-Hellman parameters
#
#     # Include the same location blocks as the port 80 server block
#     location /static/ { alias /var/www/pihap/frontend/build/static/; expires 1y; add_header Cache-Control "public"; }
#     location /api/ { proxy_pass http://127.0.0.1:5000/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_redirect off; }
#     location / { try_files $uri $uri/ /index.html; }
#
#     # Optional: Redirect HTTP to HTTPS (if you have a separate port 80 block for this)
#     # if ($scheme != "https") {
#     #     return 301 https://$host$request_uri;
#     # }
# }