version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: pihappy-backend
    restart: unless-stopped
    environment:
      # Pass environment variables needed by the Flask app
      # Option 1: Define directly (less secure for secrets)
      # MONGO_URI: mongodb://your_mongo_uri_here
      # SECRET_KEY: your_flask_secret_key
      # FLASK_ENV: production
      # Option 2: Use an .env file (docker-compose automatically reads .env in the same directory)
      # Ensure .env is in .gitignore!
      MONGO_URI: ${MONGO_URI}
      SECRET_KEY: ${SECRET_KEY}
      FLASK_ENV: production # Set explicitly for production
    # If you need to expose the port directly (e.g., for debugging, not needed with proxy)
    # ports:
    #   - "5000:5000"
    volumes:
      # Optional: Mount code for development (remove for production builds)
      # - .:/app
      # Optional: Mount persistent data if needed
      # - backend_data:/app/data
    networks:
      - pihappy-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: pihappy-frontend
    restart: unless-stopped
    # No ports exposed directly, accessed via nginx-proxy
    networks:
      - pihappy-network

  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: pihappy-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80" # Expose port 80 on the host
      # - "443:443" # Add if you configure SSL/TLS later
    volumes:
      # Mount a custom Nginx configuration for the proxy
      - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
      # Add volumes for SSL certificates if using HTTPS
      # - ./certs:/etc/nginx/certs:ro
    depends_on:
      - backend
      - frontend
    networks:
      - pihappy-network

networks:
  pihappy-network:
    driver: bridge

# Optional: Define volumes if needed
# volumes:
#   backend_data: